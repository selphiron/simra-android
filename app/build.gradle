apply plugin: 'com.android.application'

def ENV_VARIABLE_PREFIX = "SIMRA_"
def API_ENDPOINT = "API_ENDPOINT"
def API_VERSION = "API_VERSION"
def NAVIGATION_ENDPOINT = "NAVIGATION_ENDPOINT"

android {
    compileSdkVersion 30
    defaultConfig {
        applicationId "de.tuberlin.mcc.simra.app.dev"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 87
        versionName "87.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // defining the build date
        buildConfigField "long", "BUILD_DATE", System.currentTimeMillis() + "L"

        // Load `local.properties` (from root) for development configuration
        Properties properties = new Properties()
        if (project.rootProject.file('local.properties').exists()) {
            properties.load(project.rootProject.file('local.properties').newDataInputStream())
        }


        buildConfigField "String", API_ENDPOINT, properties.getProperty(API_ENDPOINT) ?: "\"https://vm1.mcc.tu-berlin.de:8082/\""
        buildConfigField "String", NAVIGATION_ENDPOINT, properties.getProperty(NAVIGATION_ENDPOINT) ?: "\"https://vm3.mcc.tu-berlin.de:4999/\""
        buildConfigField "String", API_VERSION, properties.getProperty(API_VERSION) ?: "\"12/\""

    }
    buildTypes {

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            // Allow loading the configuration Settings from environment variables
            def VAR_API_ENDPOINT = System.getenv(ENV_VARIABLE_PREFIX + API_ENDPOINT)
            if (VAR_API_ENDPOINT != null) {
                buildConfigField "String", API_ENDPOINT, "\"" + VAR_API_ENDPOINT + "\""
            }
            def VAR_API_VERSION = System.getenv(ENV_VARIABLE_PREFIX + API_VERSION)
            if (VAR_API_VERSION != null) {
                buildConfigField "String", API_VERSION, "\"" + VAR_API_VERSION + "\""
            }
            def VAR_NAV_ENDPOINT = System.getenv(ENV_VARIABLE_PREFIX + NAVIGATION_ENDPOINT)
            if (VAR_NAV_ENDPOINT != null) {
                buildConfigField "String", NAVIGATION_ENDPOINT, "\"" + VAR_NAV_ENDPOINT + "\""
            }
        }
        qa {
            initWith buildTypes.release
        }
    }
    buildFeatures {
        viewBinding = true
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    // implementation 'com.google.android.play:core:1.8.0'

    def lifecycle_version = "2.3.1"
    implementation "androidx.lifecycle:lifecycle-service:$lifecycle_version"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.4.0'
    api 'org.osmdroid:osmdroid-android:6.1.10'
    api 'com.github.MKergall:osmbonuspack:6.7.0'
    implementation 'com.github.Jay-Goo:RangeSeekBar:v2.0.4'
    implementation 'com.github.PhilJay:MPAndroidChart:v2.2.4'
    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.17'

    // Sentry Bug Reporting
    implementation 'io.sentry:sentry-android:2.1.6'

    // RingBuffer
    implementation 'org.apache.commons:commons-collections4:4.4'

    // Tests
    testImplementation 'junit:junit:4.13'
    testImplementation "org.assertj:assertj-core:3.16.1"
    // androidTestImplementation 'com.android.support.test:runner:1.0.2'
    // androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    // CameraX core library using the camera2 implementation
    def camerax_version = "1.1.0-alpha06"
    implementation "androidx.camera:camera-core:${camerax_version}"
    implementation "androidx.camera:camera-camera2:${camerax_version}"
    // If you want to additionally use the CameraX Lifecycle library
    implementation "androidx.camera:camera-lifecycle:${camerax_version}"

    // "Backporting" Java 8 streams for Android < 24
    implementation 'net.sourceforge.streamsupport:android-retrostreams:1.7.2'
}
